name: '0.1.0-$(Rev:r)'
trigger:
  batch: true
  branches:
    include:
      - "*"
  paths:
    exclude:
      - README.md
pr: none

workspace:
    clean: all

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  buildConfiguration: 'Release'
  solutionPath: '$(build.sourcesDirectory)/src/SFA.DAS.SecureMessageService.sln'

steps:
- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: $(solutionPath)
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: build
    projects: $(solutionPath)
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: test
    projects: '**/*.UnitTests.csproj'
    arguments: '--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'

- pwsh: |
    dotnet tool install dotnet-reportgenerator-globaltool --tool-path $(System.DefaultWorkingDirectory)/tools
    $(System.DefaultWorkingDirectory)/tools/reportgenerator "-reports:$(System.DefaultWorkingDirectory)/src/**/*.UnitTests/coverage.cobertura.xml" "-targetdir:$(build.artifactstagingdirectory)/reports/Cobertura.xml" -reporttypes:Cobertura;HtmlInline
  displayName: 'Code Coverage Report Generator'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish Code Coverage Results'
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: '$(build.artifactstagingdirectory)/reports/Cobertura.xml'
    reportDirectory: '$(build.artifactstagingdirectory)/reports'

- task: mspremier.BuildQualityChecks.QualityChecks-task.BuildQualityChecks@5
  displayName: 'Check build quality'
  inputs:
    checkCoverage: true
    coverageType: blocks
    coverageDeltaType: percentage
    buildConfiguration: '$(buildConfiguration)'

    
- task: DotNetCoreCLI@2
  displayName: 'Publish'
  inputs:
    command: publish
    publishWebProjects: true
    projects: $(solutionPath)
    arguments: '--configuration $(buildConfiguration) --output $(build.artifactstagingdirectory)/publish'  

- task: CopyFiles@2
  displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
  inputs:
    Contents: |
     azure/**
    TargetFolder: '$(build.artifactstagingdirectory)/publish'
    OverWrite: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)/publish'